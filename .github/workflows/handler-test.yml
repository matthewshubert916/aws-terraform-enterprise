name: Pull Request Test Handler

on:
  repository_dispatch:
    types:
      - test-command

jobs:
  public_install:
    name: Run tf-test on Public Install
    runs-on: ubuntu-latest
    env:
      WORK_DIR_PATH: ./tests/public-install
      K6_WORK_DIR_PATH: ./tests/tfe-load-test
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the pull request being tested
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      # Checkout the hashicorp/tfe-load-test repository
      - name: Checkout TFE Load Test
        uses: actions/checkout@v2
        with:
          ref: 'master'
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.PAT }}

      - name: Install required tools
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 0.14.8
          terraform_wrapper: true

      # Run Terraform commands between these comments vvv

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          AWS_DEFAULT_REGION: us-east-2
        run: terraform validate -no-color

      - name: Write GitHub Actions CIDRs to Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          echo "iact_subnet_list = $( \
            curl -H 'Accept: application/vnd.github.v3+json' https://api.github.com/meta | jq .actions | tr -d '\n' )" \
            > github.auto.tfvars

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw health_check_url

      - name: Wait For TFE
        id: wait-for-tfe
        timeout-minutes: 15
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl -sfS --max-time 5 ${{ steps.retrieve-health-check-url.outputs.stdout }}; do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw tfe_url

      - name: Retrieve IACT URL
        id: retrieve-iact-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw iact_url

      - name: Retrieve IACT
        id: retrieve-iact
        run: |
          echo "::set-output name=token::$( curl ${{ steps.retrieve-iact-url.outputs.stdout }} )"

      - name: Retrieve Initial Admin User URL
        id: retrieve-initial-admin-user-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw initial_admin_user_url

      - name: Create Admin in TFE
        id: create-admin
        run: |
          echo "::set-output name=token::$( \
            curl \
            --header 'Content-Type: application/json' \
            --data '{ \
              \"username\": \"tester\", \
              \"email\": \"tf-onprem-team@hashicorp\", \
              \"password\": \"${{ secrets.TFE_PASSWORD }}\" }' \
            ${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}?token=${{ steps.retrieve-iact.outputs.token }} \
            | jq --raw-output '.token' )"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.create-admin.outputs.token }}"
          TFE_EMAIL: tf-onprem-team@hashicorp.com
        run: |
          echo "::set-output name=result::$( make smoke-test 2>&1 )"

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      # Run Terraform commands between these comments ^^^

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            :computer: @hc-team-tfe

            ### Terraform Test Report :newspaper:

            #### Terraform Initialization :gear: `${{ steps.init.outcome }}`

            <details>
              <summary>
                <b>Terraform Initialization Output</b> :gear:
              </summary>

            ```
            ${{ steps.init.outputs.stdout }}
            ${{ steps.init.outputs.stderr }}
            ```

            </details>

            #### Terraform Validation :mag: `${{ steps.validate.outcome }}`

            <details>
              <summary>
                <b>Terraform Validation Output</b> :mag:
              </summary>

            ```
            ${{ steps.validate.outputs.stdout }}
            ${{ steps.validate.outputs.stderr }}
            ```

            </details>

            #### Terraform Apply :book: `${{ steps.apply.outcome }}`

            <details>
              <summary>
                <b>Terraform Apply Output</b> :book:
              </summary>

            ```
            ${{ steps.apply.outputs.stdout }}
            ${{ steps.apply.outputs.stderr }}
            ```

            </details>

            #### K6 Smoke Test :building_construction: `${{ steps.run-smoke-test.outcome }}`

            <details>
              <summary>
                <b>K6 Smoke Test Result</b> :building_construction:
              </summary>

            ```
            ${{ steps.run-smoke-test.outputs.result }}
            ```

            </details>

            #### Terraform Destroy :fire: `${{ steps.destroy.outcome }}`

            <details>
              <summary>
                <b>Terraform Destroy Output</b> :fire:
              </summary>

            ```
            ${{ steps.destroy.outputs.stdout }}
            ${{ steps.destroy.outputs.stderr }}
            ```

            </details>

            :link: [Action Summary Page][1]

            [1]: ${{ steps.vars.outputs.run-url }}
